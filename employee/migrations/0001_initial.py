# Generated by Django 5.1.1 on 2024-09-17 09:07

import dirtyfields.dirtyfields
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import employee.models
import multiselectfield.db.fields
import tinymce.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('job_number', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Job Number')),
                ('name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('nationality', django_countries.fields.CountryField(max_length=2, verbose_name='Nationality')),
                ('job_title', multiselectfield.db.fields.MultiSelectField(choices=[('human_resources_manager', 'Human Resources Manager'), ('administrative_officer', 'Administrative Officer'), ('chief_marketing_officer', 'Chief Marketing Officer'), ('journalist', 'Journalist'), ('proofreader', 'Proofreader'), ('video_editor', 'Video Editor'), ('graphic_designer', 'Graphic Designer'), ('content_writer', 'Content Writer'), ('voiceover_artist', 'Voiceover Artist'), ('software_developer', 'Software Developer'), ('authentication_supervisor', 'Authentication Supervisor'), ('executive_secretary', 'Executive Secretary'), ('logistics_coordinator', 'Logistics Coordinator'), ('project_coordinator', 'Project Coordinator'), ('executive_assistant', 'Executive Assistant'), ('internal_auditor', 'Internal Auditor'), ('janitorial_staff', 'Janitorial Staff')], max_length=316, verbose_name='Job Title')),
                ('is_superadmin', models.BooleanField(default=False)),
                ('department', models.CharField(blank=True, max_length=100, null=True, verbose_name='Department')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone_number', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Salary')),
                ('bank_account', models.CharField(blank=True, max_length=50, null=True, verbose_name='Bank Account Number')),
                ('account_holder', models.CharField(blank=True, max_length=100, null=True, verbose_name='Account Holder')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('notes', tinymce.models.HTMLField(blank=True, null=True, verbose_name='Notes')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdvancePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateTimeField(auto_now_add=True, verbose_name='Request Date')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('refused', 'Refused')], default='pending', max_length=50, verbose_name='Status')),
                ('notes', tinymce.models.HTMLField(blank=True, null=True, verbose_name='Notes')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workdays', models.PositiveIntegerField(verbose_name='Workdays')),
                ('overtime_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Overtime Hours')),
                ('absence_days', models.PositiveIntegerField(blank=True, null=True, verbose_name='Absence Days')),
                ('deductions', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Deductions')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_type', models.CharField(choices=[('cv', 'CV'), ('profile_picture', 'Profile Picture'), ('document', 'Document')], max_length=50)),
                ('file', models.FileField(upload_to=employee.models.employee_file_upload_path)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('noticeId', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='Notice ID')),
                ('title', models.CharField(max_length=250, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('publishDate', models.DateTimeField(verbose_name='Publish Date')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'Notice',
                'verbose_name_plural': 'Notices',
            },
        ),
        migrations.CreateModel(
            name='SalaryDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_salary', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Base Salary')),
                ('bonuses', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Bonuses')),
                ('deductions', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Deductions')),
                ('overtime_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Overtime Hours')),
                ('overtime_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Overtime Pay')),
                ('total_salary', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Total Salary')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
            ],
        ),
        migrations.CreateModel(
            name='SuperadminAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('advance_payment', 'Advance Payment'), ('salary_details', 'Salary Details'), ('attendance', 'Attendance'), ('work_schedule', 'Work Schedule')], max_length=50, unique=True)),
                ('superadmin', models.ForeignKey(limit_choices_to={'is_superadmin': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Superadmin Assignment',
                'verbose_name_plural': 'Superadmin Assignments',
            },
        ),
        migrations.CreateModel(
            name='WorkAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignmentId', models.CharField(max_length=20, verbose_name='Assignment ID')),
                ('work', models.TextField(verbose_name='Work Details')),
                ('assignDate', models.DateTimeField(verbose_name='Assign Date')),
                ('dueDate', models.DateTimeField(verbose_name='Due Date')),
                ('assignerId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignerId', to=settings.AUTH_USER_MODEL, verbose_name='Assigner')),
                ('taskerId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taskerId', to=settings.AUTH_USER_MODEL, verbose_name='Tasker')),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requestId', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Request ID')),
                ('requestMessage', models.TextField(verbose_name='Request Message')),
                ('requestDate', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Request Date')),
                ('advance_payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='employee.advancepayment', verbose_name='Advance Payment')),
                ('destinationEmployeeId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='toEmployeeId', to=settings.AUTH_USER_MODEL, verbose_name='Destination Employee')),
                ('file_attachment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='employee.employeefile', verbose_name='File Attachment')),
                ('requesterId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requesterId', to=settings.AUTH_USER_MODEL, verbose_name='Requester')),
                ('work_assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='employee.workassignment', verbose_name='Work Assignment')),
            ],
        ),
        migrations.CreateModel(
            name='WorkSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_schedules', to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
            ],
        ),
        migrations.CreateModel(
            name='DaySchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Sunday', 'Sunday'), ('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday')], max_length=9)),
                ('active', models.BooleanField(default=False)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('work_type', models.CharField(blank=True, choices=[('office', 'Office'), ('remote', 'Remote')], max_length=6, null=True)),
                ('work_schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='employee.workschedule')),
            ],
            options={
                'unique_together': {('work_schedule', 'day_of_week')},
            },
        ),
    ]
