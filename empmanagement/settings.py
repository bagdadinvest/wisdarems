"""
Django settings for empmanagement project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from __future__ import absolute_import, unicode_literals
from pathlib import Path
import os
import logging


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',  # Set this to WARNING to reduce unnecessary logs
    },
    'loggers': {
        # This will limit Django's internal logging to warnings and above
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',  # Show only warnings and errors for Django logs
            'propagate': False,
        },
        # Custom logger for your application (adjust 'employee' to your app name)
        'employee': {  
            'handlers': ['console'],
            'level': 'DEBUG',  # Show DEBUG and above for the specific app
            'propagate': False,
        },
    },
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%^gyhbwyl$qwe@+-d5igur&1wj*pr-dp^em0@i$&d36)&q_e%2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['wisdar-emp.online','127.0.0.1','test.wisdar-emp.online','localhost','172.213.217.121']
WAGTAILADMIN_BASE_URL = 'http://localhost:8000'  # or the correct domain for your site
CSRF_TRUSTED_ORIGINS = [
    'https://wisdar-emp.online',
    'https://www.wisdar-emp.online',
    'https://test.wisdar-emp.online'
]

# Application definition

SITE_URL = 'https://wisdar-emp.online'


INSTALLED_APPS = [
    # Your project apps
    'employee.apps.EmployeeConfig',
    'accounts.apps.AccountsConfig',
    'djangocms_admin_style',  # Assuming this is part of your project

    # Django admin and core apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'wagtail.contrib.settings',

    # Wagtail core apps
    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail',

    # Other core apps
    'taggit',  # Wagtail uses taggit internally

    # Third-party apps
    'import_export',  # For django-import-export
    'allauth',  # For django-allauth
    'allauth.account',
    'rosetta',
    'debug_toolbar',
    'livereload',
    'django_extensions',
    'silk',
    'metrics',
    'crispy_forms',
    'crispy_bootstrap5',

    # Newly added Wagtail-related apps
    'wagtail_color_panel',
    'wagtail_content_import',
    'wagtailmarkdown',
    'wagtail_modeltranslation',
    'wagtailseo',
    'wagtailsharing',
    'wagtail_table_block',
    'wagtail_transfer',
    'wagtailcodeblock',
    'wagtailmedia',
    'wagtailmenus',
    'googledrive',  # <-- Add your new app here

]

WAGTAIL_SITE_NAME = 'WisDoor'


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'livereload.middleware.LiveReloadScript',
    'silk.middleware.SilkyMiddleware',  # Moved here
    'employee.middleware.DarkModeMiddleware',  # Custom middleware, after Silky
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',
    'empmanagement.middleware.SuperuserDebugMiddleware',  # Add this line


]

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
LANGUAGE_COOKIE_NAME = 'django_language'


INTERNAL_IPS = [
    '127.0.0.1',
]


ROOT_URLCONF = 'empmanagement.urls'



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',  # Ensure this path points to your templates folder
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'empmanagement.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',  # This points to the SQLite file in your project directory
    }
}

AUTH_USER_MODEL = 'employee.Employee'

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

# Default language
LANGUAGE_CODE = 'en'

# Add the languages you want to support
LANGUAGES = [
    ('en', 'English'),
    ('ar', 'Arabic'),
    ('tr', 'Turkish'),
    ('fr', 'French'),
]

# Time zone, if needed
TIME_ZONE = 'Europe/Istanbul'

# Specify where your translation files are stored
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale/'),
]

# Add Middle East encoding if necessary for Arabic
USE_I18N = True
USE_L10N = True
USE_TZ = True
WAGTAIL_I18N_ENABLED = True  # Enables internationalization in Wagtail

# settings.py

WAGTAIL_ADMIN_LOGO = 'empmanagement/static/assets/img/logo-ct-dark.png'  # Place the logo in your static files directory


WAGTAILSEARCH_BACKENDS = {
    'default': {
        'BACKEND': 'wagtail.search.backends.database',
    }
}



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'empmanagement/static')
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    #'allauth.account.auth_backends.AuthenticationBackend',  # Add this for allauth
)

SITE_ID = 1  # Required by allauth

LOGIN_REDIRECT_URL = '/ems/dashboard/'  # Where to redirect after successful login
LOGOUT_REDIRECT_URL = '/ems/dashboard/'  # Where to redirect after logout

# Additional allauth settings
ACCOUNT_EMAIL_VERIFICATION = "none"  # You can configure this based on your needs
ACCOUNT_EMAIL_REQUIRED = True

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
DEFAULT_FROM_EMAIL = 'webmaster@localhost'  # Customize this for production

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.your-email-provider.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'your-email@example.com'
EMAIL_HOST_PASSWORD = 'your-password'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

ADMIN_REORDER = (
    # Group Finance models under the 'Finance' menu
    {'app': 'employee', 'label': 'Finance', 'models': (
        'employee.SalaryDetails',
        'employee.SalaryDelivery',
        'employee.AdvancePayment',
    )},
    # Group Employee Operations models under the 'Employee Operations' menu
    {'app': 'employee', 'label': 'Employee Operations', 'models': (
        'employee.Attendance',
        'employee.Notice',
        'employee.Request',
    )},
    # Other apps can remain unaffected
    {'app': 'auth'},
    {'app': 'admin'},
)

AZURE_CLIENT_SECRET = 'd74699f8ebae47b8940301bfbe317092'

# Other relevant settings for Rosetta
ROSETTA_ENABLE_TRANSLATION_SUGGESTIONS = True

ROSETTA_MESSAGES_PER_PAGE = 500



# Path to the service account JSON key file for Google API access
GOOGLE_SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, 'credentials', 'service_account.json')

# Scopes for accessing Google Drive and Google Docs
GOOGLE_API_SCOPES = [
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/drive.file',
]


